from walley_math import *
def matrix_num(row=1,col):
    x=[] 
    y=[]
    i=0
    j=0
    while i<row:
        y=[]
        j=0
        while j<col:
            y.append(0)
            j=j+1
        x.append(y)
        i=i+1
    return x
#end define matrix

# matrix_str("[1,2;3,4]")
def matrix_str(mat):
    output="["
    i=0
    length=mat.length()
    while i<length:
        if mat[i]==';':
            output=output+'],['
        else:
            output=output+mat[i]
        i=i+1
    output=output+"]"
    return nstr(output)

def matrix(param1,param2):
    if type(param1)=='int':
        return matrix_num(param1,param2)
    else:
        return matrix_str(param1)

def matrix_add(mat1,mat2):
    output=mat1
    for i in range(output.length()):
        for j in range(output[0].length()):
            output[i][j]=output[i][j]+mat2[i][j]
    return output

def matrix_minus(mat1,mat2):
    output=mat1
    for i in range(output.length()):
        for j in range(output[0].length()):
            output[i][j]=output[i][j]-mat2[i][j]
    return output

def matrix_mult(mat1,mat2):
    mat1_row=mat1.length()
    mat2_col=mat2[0].length()
    r_row=mat1_row
    r_col=mat2_col
    output=matrix(r_row,r_col)
    for i in range(r_row):
        for j in range(r_col):
            for k in range(mat1[0].length()):
                output[i][j]=output[i][j]+mat1[i][k]*mat2[k][j]
    return output

def matrix_dot_mult(mat1,mat2):
    mat1_row=mat1.length()
    mat1_col=mat1[0].length()
    output=matrix(mat1_row,mat1_col)
    for i in range(mat1_row):
        for j in range(mat1_col):
            output[i][j]=mat1[i][j]*mat2[i][j]
    return output

def matrix_transpose(mat1):
    exp:
        <@mat1 transpose>
    row=mat1.length()
    col=mat1[0].length()
    output=matrix(col,row)
    for i in range(row):
        for j in range(col):
            output[j][i]=mat1[i][j]
    return output

# 2 by 2 matrix det
def matrix_2_2_det(mat):    
    return mat[0][0]*mat[1][1]-mat[0][1]*mat[1][0]

def matrix_det(mat):
    row=len(mat)
    col=len(mat[0])
    if row!=col:
        print "Row != Col"
    if row==2:
        return matrix_2_2_det(mat)
    output=0
    for j in range(col):
        coeff=1
        if j%2==0:
            coeff=1
        else:
            coeff=-1
        temp_mat=matrix(row-1,row-1)
        temp_row_num=0
        temp_col_num=0
        for a in range(row):
            if a==0:
                continue
            temp_col_num=0
            for b in range(col):
                if b==j:
                    continue
                temp_mat[temp_row_num][temp_col_num]=mat[a][b]
                temp_col_num=temp_col_num+1
            temp_row_num=temp_row_num+1
        x=matrix_det(temp_mat)
        output=output+coeff*x*mat[0][j]
    return output

def matrix_LU_U(mat):
    for i in range(len(mat)-1):
        for a in range(len(mat)-1):
            row=a+i+1
            pivot=mat[row][i]
            for j in range(len(mat[0])):
                mat[row][j]=mat[row][j]-mat[i][j]/mat[i][i]*pivot
    return mat

def matrix_LU_L(mat):
    temp_mat=matrix(len(mat),len(mat[0]))
    temp_mat[0][0]=1
    for i in range(len(mat)):
        temp_mat[i][i]=1
    for i in range(len(mat)-1):
        for a in range(len(mat)-1):
            row=a+i+1
            pivot=mat[row][i]
            temp_mat[row][i]=1/mat[i][i]*pivot
    return temp_mat                    

def matrix_print(mat):
    println mat
    for i in range(len(mat)):
        print "["
        for j in range(len(mat[0])):
            print mat[i][j]
            print " "    
        println "]"

def matrix_eye(num1,num2="None"):
    if num2=="None":
        output=matrix(num1,num1)
    else:
        output=matrix(num1,num2)
    if num1<num2:
        for i in range(num1):
            output[i][i]=1
    else:
        for i in range(num2):
            output[i][i]=1
    return output

#end define matrix
def matrix_inverse(mat):
    temp_mat=matrix(len(mat),len(mat[0]))
    for i in range(len(mat)):
        temp_mat[i][i]=1
    for i in range(len(mat)-1):
        for a in range(len(mat)-1):
            row=a+i+1
            pivot=mat[row][i]
            for j in range(len(mat[0])):
                mat[row][j]=mat[row][j]-mat[i][j]/mat[i][i]*pivot
                temp_mat[row][j]=temp_mat[row][j]-temp_mat[i][j]/mat[i][i]*pivot
    for i in range(len(mat)-1):
        i=len(mat)-i-1
        pivot=mat[i][i]
        for a in range(i):
            temp=mat[a][i]
            for j in range(len(mat[0])):
                temp_mat[a][j]=temp_mat[a][j]-(temp_mat[i][j]/pivot)*temp
                mat[a][j]=mat[a][j]-(mat[i][j]/pivot)*temp
    for i in range(len(mat)):
        for j in range(len(mat[0])):
            temp_mat[i][j]=temp_mat[i][j]/mat[i][i]
    return temp_mat

def matrix_lu(mat):
    l=matrix_LU_L(mat)
    u=matrix_LU_U(mat)
    output=[]
    output.append(l)
    output.append(u)
    return output

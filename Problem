
1. String "Rohit's age" can not work
2 if elif else problem
   if if is false, elif is true, then else is also true
3
class monkey:
    def init(self):
        print("I am monkey")
class person extends monkey:
    def init(self,age):
        super.init(self)
        self.age=age
        print("person age is "+str(self.age))

class Rohit extends person:
    def init(self,age):
        super.init(self,age)
        print("Rohit age is "+str(self.age))

rohit is Rohit(30)

//把super替换成mother的名字
//把self替换成instance. 

class Rohit:

def rohit.init(age):
    rohit.person.init(age)
    print("Rohit age is "+str(rohit.age))

class person:

def rohit.person.init(age):
    rohit.monkey.init()
    rohit.age=age
    print("person age is "+str(rohit.age"))

class monkey:

def rohit.monkey.init()
    print("I am monkey")


#Begin to define class...
def rohit.monkey.init():
    print("I am monkey")
#Begin to define class...
def rohit.person.init(age):
    rohit.monkey.init()
    rohit.age=age
    print("person age is "+str(rohit.age))
#Begin to define class...
def rohit.init(age):
    rohit.person.init(age)
    print("Rohit age is "+str(rohit.age))


backup:
char *Walley_Substitue_Var_And_Function_Return_Value_From_File_Third_Generation(char* input_str,char *file_var_name){//, char *file_function_name){
    printf("#### Walley_Substitue_Var_And_Function_Return_Value_From_File_Third_Generation ####\n");
    printf("#### input str is |%s| ####\n",input_str);
    
    //######### replace the thing inside the {} and []
    //substitueValueInDictionaryAndList(input_str,file_var_name);
    int i=0;
    int begin=0;  //begin of { and [
    int end=0;    // end of } and ]
    for(i=0;i<(int)strlen(input_str);i++){
        if(charIsInString(input_str,i)==FALSE && input_str[i]=='{'){
            //printf("______------______FIND {}\n");
            begin=i;
            end=find_from_index(input_str,"}",begin+1);  
            char *check=substr(input_str,begin,end+1);
            while(count_str(check,"{")!=count_str(check,"}")){
                end=find_from_index(input_str,"}",end+1);
                check=substr(input_str,begin,end+1);
            }
            char *replace_str=substr(input_str,begin+1,end);   //from x{i} get i
            if(stringIsEmpty(replace_str)==FALSE){
            if(finishFindingVarAndFunction(replace_str)==FALSE){
                char *with_str=Walley_Substitue_Var_And_Function_Return_Value_From_File_Third_Generation(replace_str,file_var_name);
                input_str=replace_from_index_to_index(input_str,replace_str,with_str,begin+1,end);
            }
        }
            //printf("Replace %s with %s, the input_str is %s\n",replace_str,with_str,input_str);
        }
        
        if(charIsInString(input_str,i)==FALSE && input_str[i]=='['){
            begin=i;
            end=find_from_index(input_str,"]",begin+1);  
            char *check=substr(input_str,begin,end+1);
            while(count_str(check,"[")!=count_str(check,"]")){
                end=find_from_index(input_str,"]",end+1);
                check=substr(input_str,begin,end+1);
            }
            char *replace_str=substr(input_str,begin+1,end);
            if(stringIsEmpty(replace_str)==FALSE){
            if(finishFindingVarAndFunction(replace_str)==FALSE){//from x{i} get i
                char *with_str=Walley_Substitue_Var_And_Function_Return_Value_From_File_Third_Generation(replace_str,file_var_name);
                input_str=replace_from_index_to_index(input_str,replace_str,with_str,begin+1,end);
            }
        }
        }
        if(charIsInString(input_str,i)==FALSE && input_str[i]=='('){
            begin=i;
            end=find_from_index(input_str,")",begin+1);  
            char *check=substr(input_str,begin,end+1);
            while(count_str(check,"(")!=count_str(check,")")){
                end=find_from_index(input_str,")",end+1);
                check=substr(input_str,begin,end+1);
            }
            char *replace_str=substr(input_str,begin+1,end);
            if(stringIsEmpty(replace_str)==FALSE){
                
            if(finishFindingVarAndFunction(replace_str)==FALSE){//from x{i} get i
                char *with_str=Walley_Substitue_Var_And_Function_Return_Value_From_File_Third_Generation(replace_str,file_var_name);
                input_str=replace_from_index_to_index(input_str,replace_str,with_str,begin+1,end);
            }
            }
        }
    }
    printf("AFTER REPLACE THE THING IN [] AND {}\nTHE INPUT IS |%s|\n",input_str);
    printf("input str is :%s\nlength is %d\n",input_str,(int)strlen(input_str));
    //printf("Required File is %s\n",file_var_name);
    bool find_alpha=FALSE;
    bool finish_find_var=FALSE;
    bool find_function=FALSE;
    //int begin=0;
    //int end=(int)strlen(input_str);
    //int i=0;
    begin=0;
    end=(int)strlen(input_str);
    i=0;
    
    
    char *output=malloc(sizeof(char)*((int)strlen(input_str)+1));
    //char output[1000]="";
    for(i=0;i<(int)strlen(input_str);i++){
        output[i]=input_str[i];
    }
    output[(int)strlen(input_str)]=0;
    //printf("Output now is %s\n",output);
    
    //char *output=malloc(sizeof(char)*1000);
    //strcat(output,input_str);
    
    bool has_var=FALSE;
    for(i=0;i<(int)strlen(input_str);i++){
        //printf("#### Enter Loop Output is %s\n####",output);
        //printf("#### Output Length is %d\n",(int)strlen(output));
        int temp_length=(int)strlen(output);
        if(finishFindingVarAndFunction(output)==TRUE){
            printf("Finish Finding Var And Function, output is |%s|\n",output);
            output=substr(output,0,temp_length);
            break;
        }
        //printf("\n%d %c\n",i,input_str[i]);
        //printf("#### Output is %s\n####",output);
        //printf("--End this loop, output is %s\n",output);
        //charIsInString(input_str,i);
        //printf("++End this loop, output is %s\n",output);
        //if(find_alpha==FALSE && isalpha(input_str[i]) && charIsInString(input_str,i)==FALSE){
         /*
          * add input_str[i]=='_' in order for __temp_while__.append()......
          */   
        if(find_alpha==FALSE && (isalpha(input_str[i])||input_str[i]=='_' )&& charIsInString(input_str,i)==FALSE){
            //printf("Find alpha\n");
            //printf("--End this loop, output is %s\n",output);
            find_alpha=TRUE;
            begin=i;
            //printf("begin %d\n",begin);
        }
        //printf("Find alpha is %d\n",find_alpha);
        //printf("--End this loop, output is %s\n",output);
        if(find_alpha==TRUE && input_str[i]=='('  && charIsInString(input_str,i)==FALSE){
            find_function=TRUE;
            //printf("Find Function\n");
        }
        if(find_function){
            //printf("@@@@@ Enter Find Function @@@@@\n");
            
            find_function=FALSE;
            char *temp=substr(input_str,i,(int)strlen(input_str));
            int index_of_youkuohao=find_from_index(input_str,")",i);
            
            int num_of_zuo=count_str(substr(input_str,i,index_of_youkuohao+1),"(");
            int num_of_you = count_str(substr(input_str,i, index_of_youkuohao + 1), ")");
            //printf("zuo %d, you %d\n",num_of_zuo,num_of_you);
            while (num_of_zuo != num_of_you) {
                //printf("Bu Deng");
                index_of_youkuohao = find_from_index(input_str, ")", index_of_youkuohao + 1);
                num_of_zuo = count_str(substr(input_str,i, index_of_youkuohao + 1), "(");
                num_of_you = count_str(substr(input_str,i, index_of_youkuohao + 1), ")");
            }
            
            //printf("------\n%s\n-------\n",substr(input_str,begin,index_of_youkuohao+1));
            
            char *function=substr(input_str,begin,index_of_youkuohao+1);
            //################################################################
            //######## Check Embed Function ##################################
            char *return_value;
            
            //################### Special Function #########################################################
            /*
             * eg x="Hello"-----> x.find("He")----->0
             */
            printf("#### Second Generation FUNCTION is |%s| ####\n",function);
            
            if (find(substr(function,0,find(function,"(")),".")!=-1 && charIsInString(function,find(function,"."))==FALSE){
                char *user=substr(function,0,find(function,"."));
                bool instance_existed=checkWhetherSameInstanceExisted(file_var_name,user);
                if(instance_existed==FALSE)
                        return_value =Walley_Run_Special_Function(function,file_var_name);
                else{
                    printf("FIND INSTANCE, THIS IS A CLASS FUNCTION\n");
                    return_value=Walley_Run_One_Function_And_Return_Value_Third_Generation(function,"__walley__.wy");
                }
                
            }
            
            
            
            //################### Embeded Function ###############################################################
            else if(find(function,"int(")!=-1){
                char *temp1=substr(function,find(function,"(")+1,(int)strlen(function)-1);
                char *temp_value=Walley_Substitue_Var_And_Function_Return_Value_From_File_Third_Generation(temp1,file_var_name);
                temp_value=Walley_Eval_With_Variable_From_File(file_var_name, temp_value);
                return_value=to_int(temp_value);
            } else if (find(function,"double(")!=-1){
                char *temp1=substr(function,find(function,"(")+1,(int)strlen(function)-1);
                char *temp_value=Walley_Substitue_Var_And_Function_Return_Value_From_File_Third_Generation(temp1,file_var_name);
                temp_value=Walley_Eval_With_Variable_From_File(file_var_name, temp_value);
                return_value=to_double(temp_value);
            } else if (find(function,"str(")!=-1){
                char *temp1=substr(function,find(function,"(")+1,(int)strlen(function)-1);
                char *temp_value=Walley_Substitue_Var_And_Function_Return_Value_From_File_Third_Generation(temp1,file_var_name);
                temp_value=Walley_Eval_With_Variable_From_File(file_var_name, temp_value);
                return_value=to_string(temp_value);
            } else if(find(function,"sin(")!=-1){
                char *temp1=substr(function,find(function,"(")+1,(int)strlen(function)-1);
                char *temp_value=Walley_Substitue_Var_And_Function_Return_Value_From_File_Third_Generation(temp1,file_var_name);
                temp_value=Walley_Eval_With_Variable_From_File(file_var_name, temp_value);
                return_value=math_sin(temp_value);
            } else if(find(function,"cos(")!=-1){
                char *temp1=substr(function,find(function,"(")+1,(int)strlen(function)-1);
                char *temp_value=Walley_Substitue_Var_And_Function_Return_Value_From_File_Third_Generation(temp1,file_var_name);
                temp_value=Walley_Eval_With_Variable_From_File(file_var_name, temp_value);
                return_value=math_cos(temp_value);
            } else if(find(function,"tan(")!=-1){
                char *temp1=substr(function,find(function,"(")+1,(int)strlen(function)-1);
                char *temp_value=Walley_Substitue_Var_And_Function_Return_Value_From_File_Third_Generation(temp1,file_var_name);
                temp_value=Walley_Eval_With_Variable_From_File(file_var_name, temp_value);
                return_value=math_tan(temp_value);
            } else if(find(function,"exp(")!=-1){
                char *temp1=substr(function,find(function,"(")+1,(int)strlen(function)-1);
                char *temp_value=Walley_Substitue_Var_And_Function_Return_Value_From_File_Third_Generation(temp1,file_var_name);
                temp_value=Walley_Eval_With_Variable_From_File(file_var_name, temp_value);
                return_value=math_exp(temp_value);
            } else if(find(function,"log10(")!=-1){
                char *temp1=substr(function,find(function,"(")+1,(int)strlen(function)-1);
                char *temp_value=Walley_Substitue_Var_And_Function_Return_Value_From_File_Third_Generation(temp1,file_var_name);
                temp_value=Walley_Eval_With_Variable_From_File(file_var_name, temp_value);
                return_value=math_log10(temp_value);
            } else if(find(function,"type(")!=-1){
                char *temp1=substr(function,find(function,"(")+1,(int)strlen(function)-1);
                char *temp_value=Walley_Substitue_Var_And_Function_Return_Value_From_File_Third_Generation(temp1,file_var_name);
                temp_value=Walley_Eval_With_Variable_From_File(file_var_name, temp_value);
                return_value=var_value_type(temp_value);
                printf("Find type() and return value is %s\n",return_value);
            } else if (find(function,"num(")!=-1){
                char *temp1=substr(function,find(function,"(")+1,(int)strlen(function)-1);
                char *temp_value=Walley_Substitue_Var_And_Function_Return_Value_From_File_Third_Generation(temp1,file_var_name);
                temp_value=Walley_Eval_With_Variable_From_File(file_var_name, temp_value);
                return_value=to_num(temp_value);
            } else if (find(function,"time(")!=-1){
                char *temp1=substr(function,find(function,"(")+1,(int)strlen(function)-1);
                char *temp_value=Walley_Substitue_Var_And_Function_Return_Value_From_File_Third_Generation(temp1,file_var_name);
                temp_value=Walley_Eval_With_Variable_From_File(file_var_name, temp_value);
                return_value=simple_time(temp_value);
            }

            
            //#################################################################
            else{
            
            
            
            return_value=Walley_Run_One_Function_And_Return_Value_Third_Generation(function,"__walley__.wy");
            }

            int begin_temp=begin+(int)strlen(output)-(int)strlen(input_str);
            int end_temp=end+(int)strlen(output)-(int)strlen(input_str);
            
            //printf("Begin %d, End %d\n",begin_temp,end_temp);
            //printf("Before change, output is %s\n",output);
            output=replace_from_index_to_index(output,function,return_value,begin_temp,end_temp);
            
            i=index_of_youkuohao;
            find_alpha=FALSE;
            has_var=TRUE;
            finish_find_var=FALSE;
            continue;
        }
        
        if(find_alpha==TRUE && isSign(input_str[i]) &&charIsInString(input_str,i)==FALSE){
            find_alpha=FALSE;
            end=i;
            //printf("@@@@@@ end %d\n",end);
            finish_find_var=TRUE;
            
        }
        if(find_alpha==TRUE && ((isJudgeSign(input_str[i])) || input_str[i]==')') &&charIsInString(input_str,i)==FALSE){
            //printf("%d\n%d\n%d\n",find_alpha,(isJudgeSign(input_str[i])),input_str[i]==')');
            find_alpha=FALSE;
            end=i;
            //printf("------end %d\n",end);
            finish_find_var=TRUE;
            
        }
        if(find_alpha==TRUE && i==(int)strlen(input_str)-1){
            find_alpha=FALSE;
            end=i+1;
            //printf("end %d\n",end);     
            finish_find_var=TRUE;
        }
        //printf("--End this loop, output is %s\n",output);
        if(finish_find_var){
            //printf("@@@@ Enter finish_find_var @@@@\n");
            //printf("------\n%s\n------\n",substr(input_str,begin,end));
            //printf("Begin %d, End %d\n",begin,end);
            char *var_name = substr(input_str, begin, end);
            char *var_value;
            //if var_name is a instance var like x.age, then try to get value from __walley__.wy
            if (find_not_in_string(var_name, ".") != -1) {
                char *user = substr(var_name, 0, find_not_in_string(var_name, "."));
                if (checkWhetherSameInstanceExisted("__walley__.wy", user) == TRUE) {
                    var_value=getValueFromValueName("__walley__.wy", var_name);
                } 
                else {
                    var_value=getValueFromValueName(file_var_name,var_name);
                }
                
            } 
            else {
            
            var_value=getValueFromValueName(file_var_name,var_name);
            }
            //printf("Var Name %s\nVar Value %s\n",var_name,var_value);
            int begin_temp=begin+(int)strlen(output)-(int)strlen(input_str);
            int end_temp=end+(int)strlen(output)-(int)strlen(input_str);
            
            //printf("Begin %d, End %d\n",begin_temp,end_temp);
            //printf("Before change, output is %s\n",output);
            output=replace_from_index_to_index(output,var_name,var_value,begin_temp,end_temp);
            //printf("Output is %s\n",output);
            has_var=TRUE;
            finish_find_var=FALSE;
            find_alpha=FALSE;
            //free(var_name);
            //free(var_value);
        }
        //printf("--End this loop, output is %s\n",output);
        
    }
    
    //if(has_var==FALSE){
    //    return input_str;
    //}
    printf("Walley_Substitue_Var_And_Function_Return_Value_From_File_Third_Generation !!!!!!output is %s\n",output);
    return output;
}
